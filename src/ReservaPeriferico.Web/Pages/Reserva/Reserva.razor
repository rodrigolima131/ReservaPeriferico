@page "/reserva"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using ReservaPeriferico.Application.DTOs
@using ReservaPeriferico.Application.Interfaces
@using ReservaPeriferico.Core.Exceptions
@using ReservaPeriferico.Web.Components.Reserva
@inject IPerifericoService PerifericoService
@inject IUsuarioService UsuarioService
@inject IReservaService ReservaService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Nova Reserva - Sistema de Reserva</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Header da página -->
    <MudPaper Class="pa-4 mb-4" Style="background: linear-gradient(135deg, var(--mud-palette-primary) 0%, var(--mud-palette-primary-darken) 100%); color: white;">
        <MudText Typo="Typo.h4" Class="mb-2">
            <MudIcon Icon="@Icons.Material.Filled.Event" Class="mr-3" />
            Nova Reserva
        </MudText>
        <MudText Typo="Typo.body1" Class="opacity-75">
            Solicite a reserva de um periférico
        </MudText>
    </MudPaper>

    <MudGrid>
        <!-- Formulário de Reserva -->
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4" Elevation="3">
                <MudText Typo="Typo.h6" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
                    Dados da Reserva
                </MudText>
                
                <EditForm Model="solicitarReserva" OnSubmit="OnSubmit">
                    <DataAnnotationsValidator />
                    <MudStack Spacing="4">
                        <!-- Seleção de Periférico -->
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Periférico *</MudText>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AbrirDialogSelecionarPeriferico" Disabled="@salvando">
                                <MudIcon Icon="@(perifericoSelecionado is not null ? Icons.Material.Filled.Devices : Icons.Material.Filled.Search)" Class="mr-2" />
                                @(perifericoSelecionado is not null ? $"{perifericoSelecionado.Nome} ({perifericoSelecionado.Tipo})" : "Selecionar Periférico")
                            </MudButton>
                        </MudStack>

                        <!-- Datas -->
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudDatePicker Label="Data de Início *" @bind-Date="dataInicio" Required 
                                               MinDate="@DateTime.Today" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudDatePicker Label="Data de Fim (Opcional)" @bind-Date="dataFim" 
                                               MinDate="@DateTime.Today" />
                            </MudItem>
                        </MudGrid>

                        <!-- Observações -->
                        <MudTextField T="string" Label="Observações *" @bind-Value="solicitarReserva.Observacoes" 
                                     Lines="3" Placeholder="Descreva o motivo da reserva (obrigatório)..."
                                     MaxLength="500" Required />

                        <!-- Botões -->
                        <MudStack Row="true" Spacing="2">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" 
                                       Disabled="@salvando" StartIcon="@Icons.Material.Filled.Check">
                                @if (salvando)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                }
                                Solicitar Reserva
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" 
                                       OnClick="Cancelar" StartIcon="@Icons.Material.Filled.Close">
                                Cancelar
                            </MudButton>
                        </MudStack>
                    </MudStack>
                </EditForm>
            </MudPaper>
        </MudItem>

        <!-- Painel de Informações -->
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4" Elevation="3">
                <MudText Typo="Typo.h6" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                    Informações
                </MudText>
                
                <MudStack Spacing="4">
                    <!-- Status da Reserva -->
                    <MudStack>
                        <MudText Typo="Typo.subtitle2">Status da Reserva</MudText>
                        <MudChip T="string" Color="Color.Warning" Size="Size.Small">
                            Pendente - Aguardando aprovação
                        </MudChip>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            <strong>Data da Solicitação:</strong> @DateTime.Now.ToString("dd/MM/yyyy HH:mm")
                        </MudText>
                    </MudStack>
                    
                    <MudDivider />
                    
                    <!-- Como funciona -->
                    <MudStack>
                        <MudText Typo="Typo.subtitle2">Como funciona?</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Após enviar sua solicitação, ela será analisada pelos administradores da equipe.
                        </MudText>
                    </MudStack>
                    
                    <!-- Dicas -->
                    <MudStack>
                        <MudText Typo="Typo.subtitle2">Dicas</MudText>
                        <MudList T="string" Dense="true">
                            <MudListItem T="string">
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small" Class="mr-2" />
                                Escolha datas realistas
                            </MudListItem>
                            <MudListItem T="string">
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small" Class="mr-2" />
                                Descreva o motivo da reserva nas observações
                            </MudListItem>
                            <MudListItem T="string">
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small" Class="mr-2" />
                                Verifique a disponibilidade
                            </MudListItem>
                        </MudList>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private SolicitarReservaDto solicitarReserva = new();
    private List<PerifericoDto> perifericosDisponiveis = new();
    private PerifericoDto? perifericoSelecionado = null;
    private DateTime? dataInicio;
    private DateTime? dataFim;
    private bool salvando = false;

    protected override async Task OnInitializedAsync()
    {
        await CarregarPerifericosDisponiveis();
    }

    private async Task CarregarPerifericosDisponiveis()
    {
        try
        {
            // Carregar apenas periféricos disponíveis (ativos e não reservados)
            var todosPerifericos = await PerifericoService.GetAllAsync();
            var reservasAtivas = await ReservaService.GetAtivasAsync();
            
            var perifericosReservados = reservasAtivas.Select(r => r.PerifericoId).ToList();
            perifericosDisponiveis = todosPerifericos
                .Where(p => p.Ativo && !perifericosReservados.Contains(p.Id))
                .ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar periféricos: {ex.Message}", Severity.Error);
        }
    }

    private async Task AbrirDialogSelecionarPeriferico()
    {
        IDialogReference? dialogRef = null;
        
        var parameters = new DialogParameters 
        { 
            ["Perifericos"] = perifericosDisponiveis,
            ["OnPerifericoSelecionado"] = new EventCallback<PerifericoDto>(this, async (PerifericoDto periferico) =>
            {
                perifericoSelecionado = periferico;
                solicitarReserva.PerifericoId = periferico.Id;
                if (dialogRef != null)
                    dialogRef.Close();
            }),
            ["OnCancelar"] = new EventCallback(this, async () =>
            {
                if (dialogRef != null)
                    dialogRef.Close();
            })
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        dialogRef = await DialogService.ShowAsync<SelecionarPerifericoDialog>("Selecionar Periférico", parameters, options);
    }

    private async Task SolicitarReserva()
    {
        if (!ValidarFormulario())
            return;

        salvando = true;
        
        try
        {
            // Configurar datas
            if (dataInicio.HasValue)
            {
                solicitarReserva.DataInicio = dataInicio.Value.Date;
            }

            if (dataFim.HasValue)
            {
                solicitarReserva.DataFim = dataFim.Value.Date;
            }

            // Usuário padrão para testes (deve ser substituído pela autenticação real)
            int usuarioId = 1;
            
            // Persistir no banco
            var reservaCriada = await ReservaService.SolicitarReservaAsync(usuarioId, solicitarReserva);
            
            // Mensagem de sucesso
            Snackbar.Add($"Reserva solicitada com sucesso! ID: {reservaCriada.Id}", Severity.Success);
            
            // Limpar formulário
            LimparFormulario();
            
            // Redirecionar para dashboard após 2 segundos
            await Task.Delay(2000);
            Navigation.NavigateTo("/minhas-reservas");
        }
        catch (PerifericoNaoDisponivelException ex)
        {
            Snackbar.Add($"Erro: {ex.Message}", Severity.Warning);
            await CarregarPerifericosDisponiveis();
        }
        catch (ReservaException ex)
        {
            Snackbar.Add($"Erro na reserva: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro inesperado: {ex.Message}", Severity.Error);
        }
        finally
        {
            salvando = false;
        }
    }

    private bool ValidarFormulario()
    {
        // Validar periférico selecionado
        if (solicitarReserva.PerifericoId == 0)
        {
            Snackbar.Add("Por favor, selecione um periférico.", Severity.Warning);
            return false;
        }

        // Validar data de início
        if (!dataInicio.HasValue)
        {
            Snackbar.Add("Por favor, selecione a data de início.", Severity.Warning);
            return false;
        }

        // Validar se a data não é no passado
        if (dataInicio.Value.Date < DateTime.Today)
        {
            Snackbar.Add("A data de início não pode ser no passado.", Severity.Warning);
            return false;
        }

        // Validar data de fim se fornecida
        if (dataFim.HasValue)
        {
            if (dataFim.Value.Date <= dataInicio.Value.Date)
            {
                Snackbar.Add("A data de fim deve ser posterior à data de início.", Severity.Warning);
                return false;
            }

            // Validar período máximo (30 dias)
            var periodo = dataFim.Value.Date - dataInicio.Value.Date;
            if (periodo.Days > 30)
            {
                Snackbar.Add("O período máximo de reserva é de 30 dias.", Severity.Warning);
                return false;
            }
        }

        // Validar observações
        if (string.IsNullOrWhiteSpace(solicitarReserva.Observacoes))
        {
            Snackbar.Add("Por favor, informe as observações da reserva.", Severity.Warning);
            return false;
        }

        return true;
    }

    private void LimparFormulario()
    {
        solicitarReserva = new();
        perifericoSelecionado = null;
        dataInicio = null;
        dataFim = null;
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/");
    }

    private async Task OnSubmit(EditContext context)
    {
        await SolicitarReserva();
    }
} 