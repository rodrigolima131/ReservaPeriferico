@page "/periferico/novo"
@page "/periferico/editar/{Id:int}"
@using MudBlazor
@using ReservaPeriferico.Application.Interfaces
@using ReservaPeriferico.Application.DTOs
@using ReservaPeriferico.Core.Enums
@inject IPerifericoService PerifericoService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>@(editingPeriferico?.Id > 0 ? "Editar" : "Novo") Periférico</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-4 custom-card">
        <MudStack>
            <!-- Cabeçalho -->
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@(editingPeriferico?.Id > 0 ? Icons.Material.Filled.Edit : Icons.Material.Filled.Add)" 
                             Color="Color.Primary" Class="mr-2" />
                    <MudText Typo="Typo.h4">@(editingPeriferico?.Id > 0 ? "Editar" : "Novo") Periférico</MudText>
                </MudStack>
                
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" 
                               StartIcon="@Icons.Material.Filled.ArrowBack" 
                               OnClick="VoltarParaLista" Class="custom-button-secondary">
                        Voltar
                    </MudButton>
                    <MudButton Color="Color.Primary" OnClick="SalvarPeriferico" Disabled="!success" 
                               Variant="Variant.Filled" Class="custom-button-primary"
                               StartIcon="@Icons.Material.Filled.Save">
                        Salvar
                    </MudButton>
                </MudStack>
            </MudStack>

            <!-- Formulário -->
            <MudForm @ref="form" @bind-IsValid="@success" ValidationDelay="0">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="editingPeriferico.Nome" Label="Nome *" Required="true" 
                                       Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(ValidateNome))"
                                       Title="Nome do periférico (obrigatório)" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="editingPeriferico.Tipo" Label="Tipo *" Required="true" 
                                   Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(ValidateTipo))"
                                   Title="Tipo do periférico (obrigatório)">
                            @foreach (var tipo in Enum.GetValues<TipoPeriferico>())
                            {
                                <MudSelectItem Value="@tipo.ToString()">@tipo.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="editingPeriferico.Marca" Label="Marca *" Required="true" 
                                       Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(ValidateMarca))"
                                       Title="Marca do periférico (obrigatório)" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="editingPeriferico.Modelo" Label="Modelo" 
                                       Variant="Variant.Outlined" Title="Modelo do periférico (opcional)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="editingPeriferico.NumeroSerie" Label="Número de Série *" Required="true" 
                                       Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(ValidateNumeroSerie))"
                                       Title="Número de série único do periférico (obrigatório)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="editingPeriferico.Descricao" Label="Descrição" Lines="3" 
                                       Variant="Variant.Outlined" Title="Descrição detalhada do periférico (opcional)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudSwitch T="bool" @bind-Checked="editingPeriferico.Ativo" 
                                   Label="Periférico Ativo" Color="Color.Primary" 
                                   Title="Define se o periférico está disponível para reservas" />
                    </MudItem>
                </MudGrid>
            </MudForm>

            <!-- Informações adicionais -->
            @if (editingPeriferico?.Id > 0)
            {
                <MudDivider Class="my-4" />
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            <strong>Data de Cadastro:</strong> @editingPeriferico.DataCadastro.ToString("dd/MM/yyyy HH:mm")
                        </MudText>
                    </MudItem>
                    @if (editingPeriferico.DataAtualizacao.HasValue)
                    {
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                <strong>Última Atualização:</strong> @editingPeriferico.DataAtualizacao.Value.ToString("dd/MM/yyyy HH:mm")
                            </MudText>
                        </MudItem>
                    }
                </MudGrid>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public int? Id { get; set; }

    private PerifericoDto editingPeriferico = new();
    private bool success;
    private MudForm form = default!;

    protected override async Task OnInitializedAsync()
    {
        await CarregarPeriferico();
    }

    private async Task CarregarPeriferico()
    {
        try
        {
            if (Id.HasValue && Id.Value > 0)
            {
                // Modo edição
                var periferico = await PerifericoService.GetByIdAsync(Id.Value);
                if (periferico != null)
                {
                    editingPeriferico = periferico;
                }
                else
                {
                    Snackbar.Add("Periférico não encontrado!", Severity.Error);
                    Navigation.NavigateTo("/perifericos");
                    return;
                }
            }
            else
            {
                // Modo novo
                editingPeriferico = new PerifericoDto
                {
                    Id = 0,
                    Nome = "",
                    Descricao = "",
                    Tipo = TipoPeriferico.Outro.ToString(),
                    Marca = "",
                    Modelo = "",
                    NumeroSerie = "",
                    Ativo = true,
                    DataCadastro = DateTime.UtcNow,
                    DataAtualizacao = null
                };
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar periférico: {ex.Message}", Severity.Error);
        }
    }

    private async Task SalvarPeriferico()
    {
        try
        {
            // Validar se o número de série já existe
            if (await PerifericoService.NumeroSerieExistsAsync(editingPeriferico.NumeroSerie, editingPeriferico.Id > 0 ? editingPeriferico.Id : null))
            {
                Snackbar.Add("Número de série já existe no sistema!", Severity.Warning);
                return;
            }

            if (editingPeriferico.Id > 0)
            {
                await PerifericoService.UpdateAsync(editingPeriferico.Id, editingPeriferico);
                Snackbar.Add("Periférico atualizado com sucesso!", Severity.Success);
            }
            else
            {
                await PerifericoService.CreateAsync(editingPeriferico);
                Snackbar.Add("Periférico criado com sucesso!", Severity.Success);
            }
            
            // Voltar para a lista
            Navigation.NavigateTo("/perifericos");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar periférico: {ex.Message}", Severity.Error);
        }
    }

    private void VoltarParaLista()
    {
        Navigation.NavigateTo("/perifericos");
    }

    // Validações
    private IEnumerable<string> ValidateNome(string nome)
    {
        if (string.IsNullOrWhiteSpace(nome))
            yield return "Nome é obrigatório";
        else if (nome.Length > 100)
            yield return "Nome deve ter no máximo 100 caracteres";
    }

    private IEnumerable<string> ValidateTipo(string tipo)
    {
        if (string.IsNullOrWhiteSpace(tipo))
            yield return "Tipo é obrigatório";
        else if (tipo.Length > 50)
            yield return "Tipo deve ter no máximo 50 caracteres";
    }

    private IEnumerable<string> ValidateMarca(string marca)
    {
        if (string.IsNullOrWhiteSpace(marca))
            yield return "Marca é obrigatória";
        else if (marca.Length > 50)
            yield return "Marca deve ter no máximo 50 caracteres";
    }

    private IEnumerable<string> ValidateNumeroSerie(string numeroSerie)
    {
        if (string.IsNullOrWhiteSpace(numeroSerie))
            yield return "Número de série é obrigatório";
        else if (numeroSerie.Length > 20)
            yield return "Número de série deve ter no máximo 20 caracteres";
    }
} 