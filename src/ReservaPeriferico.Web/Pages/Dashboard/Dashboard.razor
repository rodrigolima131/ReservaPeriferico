@page "/dashboard"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using ReservaPeriferico.Application.Interfaces
@using ReservaPeriferico.Application.DTOs
@using ReservaPeriferico.Core.Enums
@inject IPerifericoService PerifericoService
@inject IUsuarioService UsuarioService
@inject IReservaService ReservaService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Dashboard - Reserva de Periféricos</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Header do Dashboard -->
    <MudPaper Class="pa-6 mb-6" Style="background: linear-gradient(135deg, var(--mud-palette-primary) 0%, var(--mud-palette-primary-darken) 100%); color: white;">
        <MudText Typo="Typo.h3" Class="mb-2">
            <MudIcon Icon="@Icons.Material.Filled.Dashboard" Class="mr-3" />
            Dashboard
        </MudText>
        <MudText Typo="Typo.body1" Class="opacity-75">
            Visão geral do sistema de reserva de periféricos
        </MudText>
    </MudPaper>

    <!-- Cards de Estatísticas -->
    <MudGrid Class="mb-6">
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="3" Style="border-left: 4px solid var(--mud-palette-primary);">
                <MudStack>
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Color="Color.Primary">Total de Periféricos</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.Computer" Color="Color.Primary" />
                    </MudStack>
                    <MudText Typo="Typo.h3" Color="Color.Primary">@totalPerifericos</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                        @(perifericosAtivos) ativos, @(perifericosInativos) inativos
                    </MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="3" Style="border-left: 4px solid var(--mud-palette-secondary);">
                <MudStack>
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Color="Color.Secondary">Total de Usuários</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Secondary" />
                    </MudStack>
                    <MudText Typo="Typo.h3" Color="Color.Secondary">@totalUsuarios</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                        Usuários cadastrados no sistema
                    </MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="3" Style="border-left: 4px solid var(--mud-palette.success);">
                <MudStack>
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Color="Color.Success">Reservas Aprovadas</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.Event" Color="Color.Success" />
                    </MudStack>
                    <MudText Typo="Typo.h3" Color="Color.Success">@reservasAprovadas</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                        @(taxaOcupacao.ToString("F1"))% de ocupação
                    </MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="3" Style="border-left: 4px solid var(--mud-palette.warning);">
                <MudStack>
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Color="Color.Warning">Reservas Pendentes</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.Schedule" Color="Color.Warning" />
                    </MudStack>
                    <MudText Typo="Typo.h3" Color="Color.Warning">@reservasPendentes</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                        Aguardando aprovação
                    </MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>



    <!-- Ações Rápidas e Últimas Reservas -->
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4" Elevation="3">
                <MudText Typo="Typo.h6" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.FlashOn" Class="mr-2" />
                    Ações Rápidas
                </MudText>
                
                <MudStack Spacing="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="@(() => Navigation.NavigateTo("/reserva"))" FullWidth="true">
                        Solicitar Nova Reserva
                    </MudButton>
                    
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" 
                               StartIcon="@Icons.Material.Filled.Event"
                               OnClick="@(() => Navigation.NavigateTo("/minhas-reservas"))" FullWidth="true">
                        Minhas Reservas
                    </MudButton>
                    
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" 
                               StartIcon="@Icons.Material.Filled.ManageAccounts"
                               OnClick="@(() => Navigation.NavigateTo("/gerenciar-reservas"))" FullWidth="true">
                        Gerenciar Reservas
                    </MudButton>
                    
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" 
                               StartIcon="@Icons.Material.Filled.Computer"
                               OnClick="@(() => Navigation.NavigateTo("/perifericos"))" FullWidth="true">
                        Gerenciar Periféricos
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4" Elevation="3">
                <MudText Typo="Typo.h6" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.History" Class="mr-2" />
                    Últimas Reservas
                </MudText>
                
                @if (ultimasReservas != null && ultimasReservas.Any())
                {
                    <MudList T="ReservaDto" Dense="true">
                        @foreach (var reserva in ultimasReservas.Take(5))
                        {
                            <MudListItem T="ReservaDto">
                                <MudStack>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.body2" Class="font-weight-medium">
                                            @reserva.PerifericoNome
                                        </MudText>
                                        <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(reserva.Status)">
                                            @GetStatusText(reserva.Status)
                                        </MudChip>
                                    </MudStack>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @reserva.UsuarioNome • @reserva.DataInicio.ToString("dd/MM")
                                    </MudText>
                                </MudStack>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 150px;">
                        <MudIcon Icon="@Icons.Material.Filled.EventBusy" Color="Color.Secondary" Size="Size.Large" />
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Nenhuma reserva encontrada</MudText>
                    </MudStack>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private int totalPerifericos = 0;
    private int totalUsuarios = 0;
    private int reservasAprovadas = 0;
    private int reservasPendentes = 0;
    private int perifericosDisponiveis = 0;
    private int perifericosAtivos = 0;
    private int perifericosInativos = 0;
    private double taxaOcupacao = 0;
    private IEnumerable<ReservaDto> ultimasReservas = new List<ReservaDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CarregarDados();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar dados: {ex.Message}", Severity.Error);
        }
    }

    private async Task CarregarDados()
    {
        var perifericos = await PerifericoService.GetAllAsync();
        var usuarios = await UsuarioService.GetAllAsync();
        var reservas = await ReservaService.GetAllAsync();
        var reservasAtivasList = await ReservaService.GetAtivasAsync();

        totalPerifericos = perifericos.Count();
        totalUsuarios = usuarios.Count();
        reservasAprovadas = reservasAtivasList.Count();
        reservasPendentes = reservas.Count(r => r.Status == StatusReserva.Pendente);
        perifericosAtivos = perifericos.Count(p => p.Ativo);
        perifericosInativos = perifericos.Count(p => !p.Ativo);
        perifericosDisponiveis = perifericosAtivos - reservasAprovadas;
        
        // Calcular taxas
        taxaOcupacao = perifericosAtivos > 0 ? (double)reservasAprovadas / perifericosAtivos * 100 : 0;
        
        ultimasReservas = reservas.OrderByDescending(r => r.DataCadastro).Take(5);
    }

    private Color GetStatusColor(StatusReserva status)
    {
        return status switch
        {
            StatusReserva.Pendente => Color.Warning,
            StatusReserva.Aprovada => Color.Success,
            StatusReserva.Rejeitada => Color.Error,
            StatusReserva.Cancelada => Color.Default,
            StatusReserva.EmUso => Color.Info,
            StatusReserva.Devolvida => Color.Secondary,
            StatusReserva.Expirada => Color.Error,
            _ => Color.Default
        };
    }

    private string GetStatusText(StatusReserva status)
    {
        return status switch
        {
            StatusReserva.Pendente => "Pendente",
            StatusReserva.Aprovada => "Aprovada",
            StatusReserva.Rejeitada => "Rejeitada",
            StatusReserva.Cancelada => "Cancelada",
            StatusReserva.EmUso => "Em Uso",
            StatusReserva.Devolvida => "Devolvida",
            StatusReserva.Expirada => "Expirada",
            _ => "Desconhecido"
        };
    }
} 