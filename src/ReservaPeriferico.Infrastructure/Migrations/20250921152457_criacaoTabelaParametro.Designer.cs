// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReservaPeriferico.Infrastructure.Data;

#nullable disable

namespace ReservaPeriferico.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250921152457_criacaoTabelaParametro")]
    partial class criacaoTabelaParametro
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Equipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("UsuarioAdministradorId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_administrador_id");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("UsuarioAdministradorId");

                    b.ToTable("equipe", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataCadastro = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Equipe responsável pelo desenvolvimento de software",
                            Nome = "Equipe de Desenvolvimento",
                            UsuarioAdministradorId = 1
                        });
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Parametro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("chave");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descricao");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<string>("UsuarioAtualizacao")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("usuario_atualizacao");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("Chave")
                        .IsUnique();

                    b.ToTable("parametro", (string)null);
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Periferico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descricao");

                    b.Property<int>("EquipeId")
                        .HasColumnType("integer")
                        .HasColumnName("equipe_id");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("marca");

                    b.Property<string>("Modelo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modelo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero_serie");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.HasIndex("NumeroSerie")
                        .IsUnique();

                    b.ToTable("periferico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            DataCadastro = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Monitor LED de 24 polegadas para desenvolvimento",
                            EquipeId = 1,
                            Marca = "Dell",
                            Modelo = "P2419H",
                            Nome = "Monitor Dell 24\"",
                            NumeroSerie = "DELL001",
                            Tipo = "Monitor"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            DataCadastro = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Teclado mecânico com switches Cherry MX Brown",
                            EquipeId = 1,
                            Marca = "Logitech",
                            Modelo = "G Pro X",
                            Nome = "Teclado Mecânico Logitech",
                            NumeroSerie = "LOG001",
                            Tipo = "Teclado"
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            DataCadastro = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Mouse óptico com DPI ajustável",
                            EquipeId = 1,
                            Marca = "Razer",
                            Modelo = "DeathAdder V3",
                            Nome = "Mouse Gamer Razer",
                            NumeroSerie = "RAZ001",
                            Tipo = "Mouse"
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            DataCadastro = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Fones de ouvido com cancelamento de ruído",
                            EquipeId = 1,
                            Marca = "Sony",
                            Modelo = "WH-1000XM4",
                            Nome = "Headset Sony WH-1000XM4",
                            NumeroSerie = "SON001",
                            Tipo = "Headset"
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            DataCadastro = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Webcam HD para reuniões e videoconferências",
                            EquipeId = 1,
                            Marca = "Logitech",
                            Modelo = "C920",
                            Nome = "Webcam Logitech C920",
                            NumeroSerie = "LOG002",
                            Tipo = "Webcam"
                        });
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAprovacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_aprovacao");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime?>("DataDevolucao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_devolucao");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_fim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_inicio");

                    b.Property<int>("EquipeId")
                        .HasColumnType("integer")
                        .HasColumnName("equipe_id");

                    b.Property<string>("MotivoRejeicao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("motivo_rejeicao");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("observacoes");

                    b.Property<int>("PerifericoId")
                        .HasColumnType("integer")
                        .HasColumnName("periferico_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("UsuarioAprovadorId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_aprovador_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.HasIndex("PerifericoId");

                    b.HasIndex("UsuarioAprovadorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("reserva", (string)null);
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<string>("Cargo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cargo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Departamento")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("departamento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("matricula");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Matricula")
                        .IsUnique();

                    b.ToTable("usuario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Cargo = "Desenvolvedor",
                            DataCadastro = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Departamento = "TI",
                            Email = "teste@empresa.com",
                            Matricula = "TESTE001",
                            Nome = "Usuário Teste"
                        });
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.UsuarioEquipe", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<int>("EquipeId")
                        .HasColumnType("integer")
                        .HasColumnName("equipe_id");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_entrada");

                    b.Property<bool>("IsAdministrador")
                        .HasColumnType("boolean")
                        .HasColumnName("is_administrador");

                    b.HasKey("UsuarioId", "EquipeId");

                    b.HasIndex("EquipeId");

                    b.ToTable("usuario_equipe", (string)null);

                    b.HasData(
                        new
                        {
                            UsuarioId = 1,
                            EquipeId = 1,
                            DataEntrada = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsAdministrador = true
                        });
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Equipe", b =>
                {
                    b.HasOne("ReservaPeriferico.Core.Entities.Usuario", "UsuarioAdministrador")
                        .WithMany("EquipesAdministradas")
                        .HasForeignKey("UsuarioAdministradorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UsuarioAdministrador");
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Periferico", b =>
                {
                    b.HasOne("ReservaPeriferico.Core.Entities.Equipe", "Equipe")
                        .WithMany("Perifericos")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipe");
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Reserva", b =>
                {
                    b.HasOne("ReservaPeriferico.Core.Entities.Equipe", "Equipe")
                        .WithMany("Reservas")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReservaPeriferico.Core.Entities.Periferico", "Periferico")
                        .WithMany("Reservas")
                        .HasForeignKey("PerifericoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReservaPeriferico.Core.Entities.Usuario", "UsuarioAprovador")
                        .WithMany("ReservasAprovadas")
                        .HasForeignKey("UsuarioAprovadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReservaPeriferico.Core.Entities.Usuario", "Usuario")
                        .WithMany("Reservas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipe");

                    b.Navigation("Periferico");

                    b.Navigation("Usuario");

                    b.Navigation("UsuarioAprovador");
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.UsuarioEquipe", b =>
                {
                    b.HasOne("ReservaPeriferico.Core.Entities.Equipe", "Equipe")
                        .WithMany("Membros")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservaPeriferico.Core.Entities.Usuario", "Usuario")
                        .WithMany("Equipes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipe");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Equipe", b =>
                {
                    b.Navigation("Membros");

                    b.Navigation("Perifericos");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Periferico", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("ReservaPeriferico.Core.Entities.Usuario", b =>
                {
                    b.Navigation("Equipes");

                    b.Navigation("EquipesAdministradas");

                    b.Navigation("Reservas");

                    b.Navigation("ReservasAprovadas");
                });
#pragma warning restore 612, 618
        }
    }
}
